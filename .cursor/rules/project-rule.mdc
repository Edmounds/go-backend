---
alwaysApply: true
---

- **错误处理统一**：所有控制器仅使用 `controllers/common.go` 提供的统一响应封装；异常交由 `middlewares/error_handler.go` 的错误处理中间件处理；禁止手写零散 JSON 响应。
- **模型来源唯一**：所有数据结构体一律从 `models/common.go` 引用，禁止在控制器/服务中自建或重复定义结构体（写代码先在 `models/common.go` 查找/复用）。
- **用户标识唯一**：前端传参名 `user_id` 视为用户的 openid 使用[[memory:6131446]]；用户相关的数据库层唯一标识为 openid，外键字段统一为 `user_openid`，禁止在业务与查询中过滤或依赖 MongoDB `_id`[[memory:6131439]]，与用户无关的查询可以使用id。
- **数据库上下文统一**：仅通过 `CreateDBContext()` 获取数据库上下文；禁止重复创建连接或新增数据库控制器；已移除的 `controllers/database_controller.go` 不得再出现等价实现。
- **响应格式一致**：新旧接口均必须使用 `controllers/common.go` 中的标准响应函数与 HTTP 状态码约定，保持 API 返回体结构一致、可预测。

每次更新路由或者添加新的功能后都同步更新微信小程序openapi.json文件

你不进行api接口的测试，我自己测试

我还有个要求，不改变原来现有的数据结构，减少对原有api文档的更改，因为前端已经在进行开发，我现在做的就是进行测试并进行bug漏洞修补，不涉及对api请求参数和响应参数的过多更改

# AI助手核心规则
三阶段工作流
阶段一：分析问题
声明格式：【分析问题】

目的 因为可能存在多个可选方案，要做出正确的决策，需要足够的依据。

必须做的事：

理解我的意图，如果有歧义请问我
搜索所有相关代码
识别问题根因
主动发现问题

发现重复代码
识别不合理的命名
发现多余的代码、类
发现可能过时的设计
发现过于复杂的设计、调用
发现不一致的类型定义
进一步搜索代码，看是否更大范围内有类似问题
做完以上事项，就可以向我提问了。

绝对禁止：

❌ 修改任何代码
❌ 急于给出解决方案
❌ 跳过搜索和理解步骤
❌ 不分析就推荐方案
阶段转换规则 本阶段你要向我提问。 如果存在多个你无法抉择的方案，要问我，作为提问的一部分。 如果没有需要问我的，则直接进入下一阶段。

阶段二：制定方案
声明格式：【制定方案】

前置条件：

我明确回答了关键技术决策。
必须做的事：

列出变更（新增、修改、删除）的文件，简要描述每个文件的变化
消除重复逻辑：如果发现重复代码，必须通过复用或抽象来消除
确保修改后的代码符合DRY原则和良好的架构设计
如果新发现了向我收集的关键决策，在这个阶段你还可以继续问我，直到没有不明确的问题之后，本阶段结束。 本阶段不允许自动切换到下一阶段。

阶段三：执行方案
声明格式：【执行方案】

必须做的事：

严格按照选定方案实现
修改后运行类型检查
绝对禁止：

❌ 提交代码（除非用户明确要求）
启动开发服务器
如果在这个阶段发现了拿不准的问题，请向我提问。

收到用户消息时，一般从【分析问题】阶段开始，除非用户明确指定阶段的名字。

use context7
